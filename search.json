[{"path":"https://jswesner.github.io/isdbayes/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 isdbayes authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jswesner.github.io/isdbayes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeff Wesner. Author, maintainer. Justin Pomeranz. Author.","code":""},{"path":"https://jswesner.github.io/isdbayes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wesner J, Pomeranz J (2025). isdbayes: Bayesian Hierarchical Modeling Power Laws using brms. R package version 0.1.0, https://jswesner.github.io/isdbayes/.","code":"@Manual{,   title = {isdbayes: Bayesian Hierarchical Modeling of Power Laws using brms},   author = {Jeff Wesner and Justin Pomeranz},   year = {2025},   note = {R package version 0.1.0},   url = {https://jswesner.github.io/isdbayes/}, }"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"isdbayes-bayesian-hierarchical-modeling-of-size-spectra","dir":"","previous_headings":"","what":"Bayesian Hierarchical Modeling of Power Laws using brms","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"Jeff Wesner","code":""},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"package allows estimation power law exponents using truncated (upper lower) Pareto distribution (Wesner et al. 2023). Specifically, allows users fit Bayesian (non)-linear hierarchical models truncated Pareto likelihood using brms (Bürkner 2017). motivation package estimate power law exponents ecological size spectra using individual-level body size data generalized mixed model framework. likelihood truncated Pareto used described (Edwards et al. 2020). package translates likelihood brms.","code":""},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"package requires installation brms rstan, requires installation C++ toolchain. Go https://mc-stan.org/users/interfaces/rstan.html follow instructions install rstan configure C++ toolchain. Install latest version brms install.packages(“brms”). Install isdbayes github using devtools:","code":"# requires an installation of devtools  devtools::install_github(\"jswesner/isdbayes\")"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"","code":"# load these packages  library(dplyr) library(tidyr) library(here) library(ggplot2) library(tidybayes) library(brms) library(isdbayes)"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"fit-individual-samples","dir":"","previous_headings":"","what":"Fit individual samples","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"First, simulate power law data using rparetocounts(). code simulates 300 body sizes power law exponent lambda = -1.2, xmin = 1, xmax = 1000. code simulates data doubly-truncated Pareto estimates xmin xmax. also adds column counts. data represent unique individual masses, column takes value 1 every body size. data repeated sizes, column can take integer double counts densities sizes. example, data x = {1.9, 1.9, 1.8, 2.8, 2.8} either analyzed body size assumed unique counts = {1, 1, 1, 1, 1} analyzed x = {1.9, 1.8, 2.8} counts = {2, 1, 2}. latter common format density estimate associated counts sampling effort. Next estimate power law exponent using brms. model (fit1) intercept model, x body sizes counts, xmin, xmax included vreal(). use vreal nothing model per se. simply required wording brms including custom families. Similarly, stanvars required wording contains custom likelihood parameters. long isdbayes loaded, stanvars = stanvars work. stay regardless changes model structure (like new predictors varyaing intercepts). example fits intercept-model estimate power-law exponent. complex examples fixed hierarchical predictors, see .","code":"# simulate data  dat = tibble(x = rparetocounts(n = 300,  lambda = -1.2,  xmin = 1, xmax = 1000)) |>    mutate(xmin = min(x),          xmax = max(x),          counts = 1) fit1 = brm(x | vreal(counts, xmin, xmax) ~ 1,            data = dat,           stanvars = stanvars,    # required for truncated Pareto           family = paretocounts(),# required for truncated Pareto           chains = 1, iter = 1000)"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"simulate-multiple-size-distributions","dir":"","previous_headings":"","what":"Simulate multiple size distributions","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"","code":"x1 = rparetocounts(lambda = -1.8) # `lambda` is required wording from brms. in this case it means the lambda exponent of the ISD x2 = rparetocounts(lambda = -1.5) x3 = rparetocounts(lambda = -1.2)  isd_data = tibble(x1 = x1,                   x2 = x2,                   x3 = x3) |>    pivot_longer(cols = everything(), names_to = \"group\", values_to = \"x\") |>    group_by(group) |>    mutate(xmin = min(x),          xmax = max(x)) |>    group_by(group, x) |>    add_count(name = \"counts\")"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"fit-multiple-size-distributions-with-a-fixed-factor","dir":"","previous_headings":"","what":"Fit multiple size distributions with a fixed factor","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"","code":"fit2 = brm(x | vreal(counts, xmin, xmax) ~ group,             data = isd_data,            stanvars = stanvars,            family = paretocounts(),            chains = 1, iter = 1000)"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"plot-group-posteriors","dir":"","previous_headings":"","what":"Plot group posteriors","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"","code":"posts_group = fit2$data |>    distinct(group, xmin, xmax) |>    mutate(counts = 1) |>    add_epred_draws(fit2, re_formula = NA)   posts_group |>    ggplot(aes(x = group, y = .epred)) +    stat_halfeye(scale = 0.2) +    geom_hline(yintercept = c(-1.8, -1.5, -1.2)) # known lambdas"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"fit-multiple-size-distributions-with-a-varying-intercept","dir":"","previous_headings":"","what":"Fit multiple size distributions with a varying intercept","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"","code":"fit3 = brm(x | vreal(counts, xmin, xmax) ~ (1|group),             data = isd_data,            stanvars = stanvars,            family = paretocounts(),            chains = 1, iter = 1000)"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"plot-varying-intercepts","dir":"","previous_headings":"","what":"Plot varying intercepts","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"","code":"posts_varint = fit3$data |>    distinct(group, xmin, xmax) |>    mutate(counts = 1) |>    add_epred_draws(fit3, re_formula = NULL)   posts_varint |>    ggplot(aes(x = group, y = .epred)) +    stat_halfeye(scale = 0.2) +    geom_hline(yintercept = c(-1.8, -1.5, -1.2)) # known lambdas"},{"path":"https://jswesner.github.io/isdbayes/index.html","id":"posterior-predictive-checks","dir":"","previous_headings":"","what":"Posterior predictive checks","title":"Bayesian Hierarchical Modeling of Power Laws using brms","text":"model fit, can use built-functions brms perform model checking.","code":"pp_check(fit2, type = \"dens_overlay_grouped\", group = \"group\") +   scale_x_log10() #> Using 10 posterior draws for ppc type 'dens_overlay_grouped' by default. #> Warning in self$trans$transform(x): NaNs produced  #> Warning in self$trans$transform(x): NaNs produced #> Warning: Removed 6 rows containing missing values (`geom_segment()`)."},{"path":[]},{"path":"https://jswesner.github.io/isdbayes/reference/dparetocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounded power law probability density function — dparetocounts","title":"Bounded power law probability density function — dparetocounts","text":"Bounded power law probability density function Bounded power law probability density function","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/dparetocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounded power law probability density function — dparetocounts","text":"","code":"dparetocounts(x, mu, vreal2, vreal3)  dparetocounts(x, mu, vreal2, vreal3)"},{"path":"https://jswesner.github.io/isdbayes/reference/dparetocounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounded power law probability density function — dparetocounts","text":"x body size value mu vector lambda (power law exponent) vreal2 xmin: minimum body size sample minimum possible body size vreal3 xmax: maximum body size sample maximum possible body size","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/dparetocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounded power law probability density function — dparetocounts","text":"numeric vector value pdf given values x, mu, xmin, xmax. numeric vector value pdf given values x, mu, xmin, xmax.","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/dparetocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounded power law probability density function — dparetocounts","text":"","code":"xmin = 1 xmax = 1000 lambda = -1.5  dparetocounts(x = 2, mu = lambda, vreal2 = xmin, vreal3 = xmax) #> Error in dparetocounts(x = 2, mu = lambda, vreal2 = xmin, vreal3 = xmax): unused arguments (mu = lambda, vreal2 = xmin, vreal3 = xmax) xmin = 1 xmax = 1000 lambda = -1.5  dparetocounts(x = 2, mu = lambda, vreal2 = xmin, vreal3 = xmax) #> Error in dparetocounts(x = 2, mu = lambda, vreal2 = xmin, vreal3 = xmax): unused arguments (mu = lambda, vreal2 = xmin, vreal3 = xmax)"},{"path":"https://jswesner.github.io/isdbayes/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://jswesner.github.io/isdbayes/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> [1] \"Hello, world!\""},{"path":"https://jswesner.github.io/isdbayes/reference/log_lik_paretocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate custom log-likelihood for Stan — log_lik_paretocounts","title":"Generate custom log-likelihood for Stan — log_lik_paretocounts","text":"function called directly. used set log likelihood later use `brms` via family option within `brm()` function called directly. used set log likelihood later use `brms` via family option within `brm()`","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/log_lik_paretocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate custom log-likelihood for Stan — log_lik_paretocounts","text":"","code":"log_lik_paretocounts(i, prep)  log_lik_paretocounts(i, prep)"},{"path":"https://jswesner.github.io/isdbayes/reference/log_lik_paretocounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate custom log-likelihood for Stan — log_lik_paretocounts","text":"see documentation `get_dpar` within `brms` prep see documentation `get_dpar` within `brms`","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/log_lik_paretocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate custom log-likelihood for Stan — log_lik_paretocounts","text":"NA NA","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/log_lik_paretocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate custom log-likelihood for Stan — log_lik_paretocounts","text":"","code":"NA #> [1] NA NA #> [1] NA"},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Create custom paretocounts family — paretocounts","title":"Create custom paretocounts family — paretocounts","text":"function called directly. used create paretocounts() family option `brms` function called directly. used create paretocounts() family option `brms`","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create custom paretocounts family — paretocounts","text":"","code":"paretocounts()  paretocounts()"},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create custom paretocounts family — paretocounts","text":"NA NA","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create custom paretocounts family — paretocounts","text":"","code":"NA #> [1] NA NA #> [1] NA"},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts_lpdf_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create paretocounts log posterior density function — paretocounts_lpdf_temp","title":"Create paretocounts log posterior density function — paretocounts_lpdf_temp","text":"function called directly. used create paretocounts() family option `brms` function called directly. used create paretocounts() family option `brms`","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts_lpdf_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create paretocounts log posterior density function — paretocounts_lpdf_temp","text":"","code":"paretocounts_lpdf_temp(Y, mu, vreal1, vreal2, vreal3)  paretocounts_lpdf_temp(Y, mu, vreal1, vreal2, vreal3)"},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts_lpdf_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create paretocounts log posterior density function — paretocounts_lpdf_temp","text":"Y vector data (individual body sizes) mu exponent bounded power law vreal1 counts body size (numeric integer) vreal2 xmin: minimum body size sample minimum possible body size vreal3 xmax: maximum body size sample maximum possible body size","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts_lpdf_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create paretocounts log posterior density function — paretocounts_lpdf_temp","text":"temporary function later vectorized using vectorize(paretocounts_lpdf_temp) temporary function later vectorized using vectorize(paretocounts_lpdf_temp)","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/paretocounts_lpdf_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create paretocounts log posterior density function — paretocounts_lpdf_temp","text":"","code":"NA #> [1] NA NA #> [1] NA"},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_epred_paretocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange data for posterior epred prediction — posterior_epred_paretocounts","title":"Arrange data for posterior epred prediction — posterior_epred_paretocounts","text":"function called directly. used allow add_epred_draws() `tidybayes` package work `brmfit` object paretocounts_lpdf. function called directly. used allow add_epred_draws() `tidybayes` package work `brmfit` object paretocounts_lpdf.","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_epred_paretocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange data for posterior epred prediction — posterior_epred_paretocounts","text":"","code":"posterior_epred_paretocounts(prep)  posterior_epred_paretocounts(prep)"},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_epred_paretocounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange data for posterior epred prediction — posterior_epred_paretocounts","text":"prep see documentation `get_dpar` within `brms`","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_epred_paretocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange data for posterior epred prediction — posterior_epred_paretocounts","text":"NA NA","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_epred_paretocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange data for posterior epred prediction — posterior_epred_paretocounts","text":"","code":"NA #> [1] NA NA #> [1] NA"},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_predict_paretocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange data for posterior prediction — posterior_predict_paretocounts","title":"Arrange data for posterior prediction — posterior_predict_paretocounts","text":"function called directly. function called directly.","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_predict_paretocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange data for posterior prediction — posterior_predict_paretocounts","text":"","code":"posterior_predict_paretocounts(i, prep, ...)  posterior_predict_paretocounts(i, prep, ...)"},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_predict_paretocounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange data for posterior prediction — posterior_predict_paretocounts","text":"see documentation `get_dpar` within `brms` prep see documentation `get_dpar` within `brms` ...","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_predict_paretocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange data for posterior prediction — posterior_predict_paretocounts","text":"NA NA","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/posterior_predict_paretocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange data for posterior prediction — posterior_predict_paretocounts","text":"","code":"NA #> [1] NA NA #> [1] NA"},{"path":"https://jswesner.github.io/isdbayes/reference/rparetocounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data from a bounded power law Simulates data from a bounded power law. This is basically a vectorized version of the rPLB() function in Edwards et al. (2017) `sizeSpectra` package. The argument names are required to match the default arguments for custom likelihoods in `brms`. — rparetocounts","title":"Simulate data from a bounded power law Simulates data from a bounded power law. This is basically a vectorized version of the rPLB() function in Edwards et al. (2017) `sizeSpectra` package. The argument names are required to match the default arguments for custom likelihoods in `brms`. — rparetocounts","text":"Simulate data bounded power law Simulates data bounded power law. basically vectorized version rPLB() function Edwards et al. (2017) `sizeSpectra` package. argument names required match default arguments custom likelihoods `brms`. Simulate data bounded power law Simulates data bounded power law. basically vectorized version rPLB() function Edwards et al. (2017) `sizeSpectra` package. argument names required match default arguments custom likelihoods `brms`.","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/rparetocounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data from a bounded power law Simulates data from a bounded power law. This is basically a vectorized version of the rPLB() function in Edwards et al. (2017) `sizeSpectra` package. The argument names are required to match the default arguments for custom likelihoods in `brms`. — rparetocounts","text":"","code":"rparetocounts(n = 300, mu = -1.2, vreal2 = 1, vreal3 = 1000)  rparetocounts(n = 300, mu = -1.2, vreal2 = 1, vreal3 = 1000)"},{"path":"https://jswesner.github.io/isdbayes/reference/rparetocounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data from a bounded power law Simulates data from a bounded power law. This is basically a vectorized version of the rPLB() function in Edwards et al. (2017) `sizeSpectra` package. The argument names are required to match the default arguments for custom likelihoods in `brms`. — rparetocounts","text":"n number observations mu vector lambda (power law exponent) vreal2 xmin: minimum body size sample minimum possible body size vreal3 xmax: maximum body size sample maximum possible body size","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/rparetocounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data from a bounded power law Simulates data from a bounded power law. This is basically a vectorized version of the rPLB() function in Edwards et al. (2017) `sizeSpectra` package. The argument names are required to match the default arguments for custom likelihoods in `brms`. — rparetocounts","text":"numeric vector numeric vector","code":""},{"path":"https://jswesner.github.io/isdbayes/reference/rparetocounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data from a bounded power law Simulates data from a bounded power law. This is basically a vectorized version of the rPLB() function in Edwards et al. (2017) `sizeSpectra` package. The argument names are required to match the default arguments for custom likelihoods in `brms`. — rparetocounts","text":"","code":"rparetocounts(n = 100, mu = -1.5, vreal2 = 1, vreal3 = 2000) #> Error in rparetocounts(n = 100, mu = -1.5, vreal2 = 1, vreal3 = 2000): unused arguments (mu = -1.5, vreal2 = 1, vreal3 = 2000) rparetocounts(n = 100, mu = -1.5, vreal2 = 1, vreal3 = 2000) #> Error in rparetocounts(n = 100, mu = -1.5, vreal2 = 1, vreal3 = 2000): unused arguments (mu = -1.5, vreal2 = 1, vreal3 = 2000)"}]
